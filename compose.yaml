version: '3.8'

services:
  # === Service PHP-FPM pour Symfony ===
  php:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: symfony_php
    restart: always
    working_dir: /app
    volumes:
      - ./:/app:delegated
    environment:
      # Symfony lit DATABASE_URL depuis .env, on l'exporte ici pour Docker
      DATABASE_URL: "postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}"
      APP_ENV: dev
      # Vous pouvez ajouter d'autres variables d'env. si besoin
    depends_on:
      database:
        condition: service_healthy

  # === Service Nginx pour servir votre application ===
  nginx:
    image: nginx:1.25-alpine
    container_name: symfony_nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./:/app:ro,delegated
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    command: >
        sh -c "
          mkdir -p /var/log/nginx && \
          touch /var/log/nginx/access.log /var/log/nginx/error.log && \
          chown -R nginx:nginx /var/log/nginx && \
          nginx -g 'daemon off;'
        "
    depends_on:
      - php

  # === Base de donn√©es PostgreSQL ===
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    container_name: symfony_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    ports:
      - "5432:5432"
    volumes:
      - database_data:/var/lib/postgresql/data:rw

  # === Interface d'administration de la base ===
  adminer:
    image: adminer
    container_name: symfony_adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - database
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.4.2
    container_name: nginx_exporter
    ports:
      - "9113:9113"
    command:
    - "--nginx.scrape-uri=http://nginx:80/nginx_status"

    depends_on:
      - nginx

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev)(/|$)'

  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - nginx-exporter
      - cadvisor
      - node-exporter


  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      DS_PROMETHEUS: "Prometheus"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
      
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      # Mount the application log directory
      - ./:/app:ro 
      - nginx_logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
      - php # Ensure php container (and its logs) exists
    restart: unless-stopped

volumes:
  database_data:
  grafana_data:
  nginx_logs: {}
